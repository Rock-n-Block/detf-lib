/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type AdminRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface AdminRole extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AdminRole;
  clone(): AdminRole;
  methods: {
    isAdmin(account: string): NonPayableTransactionObject<boolean>;

    addAdmin(account: string): NonPayableTransactionObject<void>;

    renounceAdmin(): NonPayableTransactionObject<void>;
  };
  events: {
    AdminAdded(cb?: Callback<AdminAdded>): EventEmitter;
    AdminAdded(options?: EventOptions, cb?: Callback<AdminAdded>): EventEmitter;

    AdminRemoved(cb?: Callback<AdminRemoved>): EventEmitter;
    AdminRemoved(
      options?: EventOptions,
      cb?: Callback<AdminRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAdded", cb: Callback<AdminAdded>): void;
  once(
    event: "AdminAdded",
    options: EventOptions,
    cb: Callback<AdminAdded>
  ): void;

  once(event: "AdminRemoved", cb: Callback<AdminRemoved>): void;
  once(
    event: "AdminRemoved",
    options: EventOptions,
    cb: Callback<AdminRemoved>
  ): void;
}
