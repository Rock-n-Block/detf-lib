/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type NewImplementation = ContractEventLog<{
  oldImplementation: string;
  newImplementation: string;
  0: string;
  1: string;
}>;
export type NewPendingAdmin = ContractEventLog<{
  oldPendingAdmin: string;
  newPendingAdmin: string;
  0: string;
  1: string;
}>;
export type ProposalCanceled = ContractEventLog<{
  id: string;
  0: string;
}>;
export type ProposalCreated = ContractEventLog<{
  id: string;
  proposer: string;
  targets: string[];
  values: string[];
  signatures: string[];
  calldatas: string[];
  startBlock: string;
  endBlock: string;
  description: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string[];
  6: string;
  7: string;
  8: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  id: string;
  0: string;
}>;
export type ProposalQueued = ContractEventLog<{
  id: string;
  eta: string;
  0: string;
  1: string;
}>;
export type ProposalThresholdSet = ContractEventLog<{
  oldProposalThreshold: string;
  newProposalThreshold: string;
  0: string;
  1: string;
}>;
export type VoteCast = ContractEventLog<{
  voter: string;
  proposalId: string;
  support: string;
  votes: string;
  reason: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type VotingDelaySet = ContractEventLog<{
  oldVotingDelay: string;
  newVotingDelay: string;
  0: string;
  1: string;
}>;
export type VotingPeriodSet = ContractEventLog<{
  oldVotingPeriod: string;
  newVotingPeriod: string;
  0: string;
  1: string;
}>;

export interface GovernorEvents extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GovernorEvents;
  clone(): GovernorEvents;
  methods: {};
  events: {
    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    NewImplementation(cb?: Callback<NewImplementation>): EventEmitter;
    NewImplementation(
      options?: EventOptions,
      cb?: Callback<NewImplementation>
    ): EventEmitter;

    NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter;
    NewPendingAdmin(
      options?: EventOptions,
      cb?: Callback<NewPendingAdmin>
    ): EventEmitter;

    ProposalCanceled(cb?: Callback<ProposalCanceled>): EventEmitter;
    ProposalCanceled(
      options?: EventOptions,
      cb?: Callback<ProposalCanceled>
    ): EventEmitter;

    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    ProposalQueued(cb?: Callback<ProposalQueued>): EventEmitter;
    ProposalQueued(
      options?: EventOptions,
      cb?: Callback<ProposalQueued>
    ): EventEmitter;

    ProposalThresholdSet(cb?: Callback<ProposalThresholdSet>): EventEmitter;
    ProposalThresholdSet(
      options?: EventOptions,
      cb?: Callback<ProposalThresholdSet>
    ): EventEmitter;

    VoteCast(cb?: Callback<VoteCast>): EventEmitter;
    VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter;

    VotingDelaySet(cb?: Callback<VotingDelaySet>): EventEmitter;
    VotingDelaySet(
      options?: EventOptions,
      cb?: Callback<VotingDelaySet>
    ): EventEmitter;

    VotingPeriodSet(cb?: Callback<VotingPeriodSet>): EventEmitter;
    VotingPeriodSet(
      options?: EventOptions,
      cb?: Callback<VotingPeriodSet>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "NewImplementation", cb: Callback<NewImplementation>): void;
  once(
    event: "NewImplementation",
    options: EventOptions,
    cb: Callback<NewImplementation>
  ): void;

  once(event: "NewPendingAdmin", cb: Callback<NewPendingAdmin>): void;
  once(
    event: "NewPendingAdmin",
    options: EventOptions,
    cb: Callback<NewPendingAdmin>
  ): void;

  once(event: "ProposalCanceled", cb: Callback<ProposalCanceled>): void;
  once(
    event: "ProposalCanceled",
    options: EventOptions,
    cb: Callback<ProposalCanceled>
  ): void;

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "ProposalQueued", cb: Callback<ProposalQueued>): void;
  once(
    event: "ProposalQueued",
    options: EventOptions,
    cb: Callback<ProposalQueued>
  ): void;

  once(event: "ProposalThresholdSet", cb: Callback<ProposalThresholdSet>): void;
  once(
    event: "ProposalThresholdSet",
    options: EventOptions,
    cb: Callback<ProposalThresholdSet>
  ): void;

  once(event: "VoteCast", cb: Callback<VoteCast>): void;
  once(event: "VoteCast", options: EventOptions, cb: Callback<VoteCast>): void;

  once(event: "VotingDelaySet", cb: Callback<VotingDelaySet>): void;
  once(
    event: "VotingDelaySet",
    options: EventOptions,
    cb: Callback<VotingDelaySet>
  ): void;

  once(event: "VotingPeriodSet", cb: Callback<VotingPeriodSet>): void;
  once(
    event: "VotingPeriodSet",
    options: EventOptions,
    cb: Callback<VotingPeriodSet>
  ): void;
}
