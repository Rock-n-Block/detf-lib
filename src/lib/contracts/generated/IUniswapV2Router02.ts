/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Web3 from "web3";
import { PromiEvent, TransactionReceipt } from "web3-core/types";

import { Abi } from "./IUniswapV2Router02.abi";
import { IUniswapV2Router02 as Web3Contract } from "./IUniswapV2Router02.web3";
import { PayableTransactionObject, NonPayableTransactionObject } from "./types";

interface IParams {
  address: string;
  web3: Web3;
  sender?: string; // the address of sender, if undefined then web3.eth.defaultAccount used
  gasEstimationMultiplayer?: number; // if undefined then 1
}

const DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %

export class IUniswapV2Router02 {
  native: Web3Contract;
  gasEstimationMultiplayer: number;
  web3: Web3;
  _sender: string | undefined;

  get sender(): string | undefined {
    if (this._sender) return this._sender;
    if (this.web3.defaultAccount) return this.web3.defaultAccount;
    return undefined;
  }

  protected getSenderOrFail(): string {
    const sender = this.sender;
    if (!sender) {
      throw new Error("Sender is required");
    }
    return sender;
  }

  constructor({ address, web3, sender, gasEstimationMultiplayer }: IParams) {
    this._sender = sender;
    this.native = new web3.eth.Contract(Abi, address) as any;
    this.gasEstimationMultiplayer =
      gasEstimationMultiplayer ?? DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
    this.web3 = web3;
  }

  protected async estimateGas<
    K,
    T extends PayableTransactionObject<K> | NonPayableTransactionObject<K>
  >(method: T, args?: Parameters<T["estimateGas"]>) {
    const originalEstimation = await method.estimateGas(...(args ?? []));
    return new BN(originalEstimation)
      .muln(this.gasEstimationMultiplayer)
      .toString();
  }

  async WETH(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.WETH();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async addLiquidity(
    tokenA: string,
    tokenB: string,
    amountADesired: number | string | BN,
    amountBDesired: number | string | BN,
    amountAMin: number | string | BN,
    amountBMin: number | string | BN,
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.addLiquidity(
      tokenA,
      tokenB,
      amountADesired,
      amountBDesired,
      amountAMin,
      amountBMin,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async addLiquidityETH(
    token: string,
    amountTokenDesired: number | string | BN,
    amountTokenMin: number | string | BN,
    amountETHMin: number | string | BN,
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.addLiquidityETH(
      token,
      amountTokenDesired,
      amountTokenMin,
      amountETHMin,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async factory(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.factory();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getAmountIn(
    amountOut: number | string | BN,
    reserveIn: number | string | BN,
    reserveOut: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.getAmountIn(
      amountOut,
      reserveIn,
      reserveOut
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getAmountOut(
    amountIn: number | string | BN,
    reserveIn: number | string | BN,
    reserveOut: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.getAmountOut(
      amountIn,
      reserveIn,
      reserveOut
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getAmountsIn(
    amountOut: number | string | BN,
    path: string[]
  ): Promise<string[]> {
    return this.native.methods.getAmountsIn(amountOut, path).call();
  }

  async getAmountsOut(
    amountIn: number | string | BN,
    path: string[]
  ): Promise<string[]> {
    return this.native.methods.getAmountsOut(amountIn, path).call();
  }

  async quote(
    amountA: number | string | BN,
    reserveA: number | string | BN,
    reserveB: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.quote(amountA, reserveA, reserveB);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidity(
    tokenA: string,
    tokenB: string,
    liquidity: number | string | BN,
    amountAMin: number | string | BN,
    amountBMin: number | string | BN,
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidity(
      tokenA,
      tokenB,
      liquidity,
      amountAMin,
      amountBMin,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidityETH(
    token: string,
    liquidity: number | string | BN,
    amountTokenMin: number | string | BN,
    amountETHMin: number | string | BN,
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidityETH(
      token,
      liquidity,
      amountTokenMin,
      amountETHMin,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidityETHWithPermit(
    token: string,
    liquidity: number | string | BN,
    amountTokenMin: number | string | BN,
    amountETHMin: number | string | BN,
    to: string,
    deadline: number | string | BN,
    approveMax: boolean,
    v: number | string | BN,
    r: string | number[],
    s: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidityETHWithPermit(
      token,
      liquidity,
      amountTokenMin,
      amountETHMin,
      to,
      deadline,
      approveMax,
      v,
      r,
      s
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidityWithPermit(
    tokenA: string,
    tokenB: string,
    liquidity: number | string | BN,
    amountAMin: number | string | BN,
    amountBMin: number | string | BN,
    to: string,
    deadline: number | string | BN,
    approveMax: boolean,
    v: number | string | BN,
    r: string | number[],
    s: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidityWithPermit(
      tokenA,
      tokenB,
      liquidity,
      amountAMin,
      amountBMin,
      to,
      deadline,
      approveMax,
      v,
      r,
      s
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapETHForExactTokens(
    amountOut: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapETHForExactTokens(
      amountOut,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactETHForTokens(
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactETHForTokens(
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactTokensForETH(
    amountIn: number | string | BN,
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactTokensForETH(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactTokensForTokens(
    amountIn: number | string | BN,
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactTokensForTokens(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapTokensForExactETH(
    amountOut: number | string | BN,
    amountInMax: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapTokensForExactETH(
      amountOut,
      amountInMax,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapTokensForExactTokens(
    amountOut: number | string | BN,
    amountInMax: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapTokensForExactTokens(
      amountOut,
      amountInMax,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidityETHSupportingFeeOnTransferTokens(
    token: string,
    liquidity: number | string | BN,
    amountTokenMin: number | string | BN,
    amountETHMin: number | string | BN,
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidityETHSupportingFeeOnTransferTokens(
      token,
      liquidity,
      amountTokenMin,
      amountETHMin,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    token: string,
    liquidity: number | string | BN,
    amountTokenMin: number | string | BN,
    amountETHMin: number | string | BN,
    to: string,
    deadline: number | string | BN,
    approveMax: boolean,
    v: number | string | BN,
    r: string | number[],
    s: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token,
      liquidity,
      amountTokenMin,
      amountETHMin,
      to,
      deadline,
      approveMax,
      v,
      r,
      s
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: number | string | BN,
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: number | string | BN,
    amountOutMin: number | string | BN,
    path: string[],
    to: string,
    deadline: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }
}
