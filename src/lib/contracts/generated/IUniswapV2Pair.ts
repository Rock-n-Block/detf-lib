/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Web3 from "web3";
import { PromiEvent, TransactionReceipt } from "web3-core/types";

import { Abi } from "./IUniswapV2Pair.abi";
import { IUniswapV2Pair as Web3Contract } from "./IUniswapV2Pair.web3";
import { PayableTransactionObject, NonPayableTransactionObject } from "./types";

interface IParams {
  address: string;
  web3: Web3;
  sender?: string; // the address of sender, if undefined then web3.eth.defaultAccount used
  gasEstimationMultiplayer?: number; // if undefined then 1
}

const DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %

export class IUniswapV2Pair {
  native: Web3Contract;
  gasEstimationMultiplayer: number;
  web3: Web3;
  _sender: string | undefined;

  get sender(): string | undefined {
    if (this._sender) return this._sender;
    if (this.web3.defaultAccount) return this.web3.defaultAccount;
    return undefined;
  }

  protected getSenderOrFail(): string {
    const sender = this.sender;
    if (!sender) {
      throw new Error("Sender is required");
    }
    return sender;
  }

  constructor({ address, web3, sender, gasEstimationMultiplayer }: IParams) {
    this._sender = sender;
    this.native = new web3.eth.Contract(Abi, address) as any;
    this.gasEstimationMultiplayer =
      gasEstimationMultiplayer ?? DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
    this.web3 = web3;
  }

  protected async estimateGas<
    K,
    T extends PayableTransactionObject<K> | NonPayableTransactionObject<K>
  >(method: T, args?: Parameters<T["estimateGas"]>) {
    const originalEstimation = await method.estimateGas(...(args ?? []));
    return new BN(originalEstimation)
      .muln(this.gasEstimationMultiplayer)
      .toString();
  }

  async name(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.name();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async symbol(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.symbol();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async decimals(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.decimals();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async totalSupply(): Promise<string> {
    return this.native.methods.totalSupply().call();
  }

  async balanceOf(owner: string): Promise<string> {
    return this.native.methods.balanceOf(owner).call();
  }

  async allowance(owner: string, spender: string): Promise<string> {
    return this.native.methods.allowance(owner, spender).call();
  }

  async approve(
    spender: string,
    value: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.approve(spender, value);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async transfer(
    to: string,
    value: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.transfer(to, value);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async transferFrom(
    from: string,
    to: string,
    value: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.transferFrom(from, to, value);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async DOMAIN_SEPARATOR(): Promise<string> {
    return this.native.methods.DOMAIN_SEPARATOR().call();
  }

  async PERMIT_TYPEHASH(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.PERMIT_TYPEHASH();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async nonces(owner: string): Promise<string> {
    return this.native.methods.nonces(owner).call();
  }

  async permit(
    owner: string,
    spender: string,
    value: number | string | BN,
    deadline: number | string | BN,
    v: number | string | BN,
    r: string | number[],
    s: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.permit(
      owner,
      spender,
      value,
      deadline,
      v,
      r,
      s
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async MINIMUM_LIQUIDITY(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.MINIMUM_LIQUIDITY();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async factory(): Promise<string> {
    return this.native.methods.factory().call();
  }

  async token0(): Promise<string> {
    return this.native.methods.token0().call();
  }

  async token1(): Promise<string> {
    return this.native.methods.token1().call();
  }

  async getReserves(): Promise<{
    reserve0: string;
    reserve1: string;
    blockTimestampLast: string;
    0: string;
    1: string;
    2: string;
  }> {
    return this.native.methods.getReserves().call();
  }

  async price0CumulativeLast(): Promise<string> {
    return this.native.methods.price0CumulativeLast().call();
  }

  async price1CumulativeLast(): Promise<string> {
    return this.native.methods.price1CumulativeLast().call();
  }

  async kLast(): Promise<string> {
    return this.native.methods.kLast().call();
  }

  async mint(to: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.mint(to);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async burn(to: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.burn(to);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async swap(
    amount0Out: number | string | BN,
    amount1Out: number | string | BN,
    to: string,
    data: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.swap(amount0Out, amount1Out, to, data);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async skim(to: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.skim(to);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async sync(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.sync();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async initialize(
    arg0: string,
    arg1: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.initialize(arg0, arg1);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }
}
