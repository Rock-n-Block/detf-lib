/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Web3 from "web3";
import { PromiEvent, TransactionReceipt } from "web3-core/types";

import { Abi } from "./Detf.abi";
import { Detf as Web3Contract } from "./Detf.web3";
import { PayableTransactionObject, NonPayableTransactionObject } from "./types";

interface IParams {
  address: string;
  web3: Web3;
  sender?: string; // the address of sender, if undefined then web3.eth.defaultAccount used
  gasEstimationMultiplayer?: number; // if undefined then 1
}

const DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %

export class Detf {
  native: Web3Contract;
  gasEstimationMultiplayer: number;
  web3: Web3;
  _sender: string | undefined;

  get sender(): string | undefined {
    if (this._sender) return this._sender;
    if (this.web3.defaultAccount) return this.web3.defaultAccount;
    return undefined;
  }

  protected getSenderOrFail(): string {
    const sender = this.sender;
    if (!sender) {
      throw new Error("Sender is required");
    }
    return sender;
  }

  constructor({ address, web3, sender, gasEstimationMultiplayer }: IParams) {
    this._sender = sender;
    this.native = new web3.eth.Contract(Abi, address) as any;
    this.gasEstimationMultiplayer =
      gasEstimationMultiplayer ?? DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
    this.web3 = web3;
  }

  protected async estimateGas<
    K,
    T extends PayableTransactionObject<K> | NonPayableTransactionObject<K>
  >(method: T, args?: Parameters<T["estimateGas"]>) {
    const originalEstimation = await method.estimateGas(...(args ?? []));
    return new BN(originalEstimation)
      .muln(this.gasEstimationMultiplayer)
      .toString();
  }

  async DELEGATION_TYPEHASH(): Promise<string> {
    return this.native.methods.DELEGATION_TYPEHASH().call();
  }

  async DOMAIN_TYPEHASH(): Promise<string> {
    return this.native.methods.DOMAIN_TYPEHASH().call();
  }

  async addToAmmList(account: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.addToAmmList(account);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async allowance(owner: string, spender: string): Promise<string> {
    return this.native.methods.allowance(owner, spender).call();
  }

  async approve(
    spender: string,
    amount: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.approve(spender, amount);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async balanceOf(account: string): Promise<string> {
    return this.native.methods.balanceOf(account).call();
  }

  async changeWithdrawLimit(
    newLimit: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.changeWithdrawLimit(newLimit);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async checkpoints(
    arg0: string,
    arg1: number | string | BN
  ): Promise<{
    fromBlock: string;
    votes: string;
    0: string;
    1: string;
  }> {
    return this.native.methods.checkpoints(arg0, arg1).call();
  }

  async decreaseAllowance(
    spender: string,
    subtractedValue: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.decreaseAllowance(
      spender,
      subtractedValue
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async delegates(arg0: string): Promise<string> {
    return this.native.methods.delegates(arg0).call();
  }

  async delegatorVotes(arg0: string): Promise<string> {
    return this.native.methods.delegatorVotes(arg0).call();
  }

  async excludeAccountFromRewards(
    account: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.excludeAccountFromRewards(account);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getHoldingFee(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.getHoldingFee();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getSlippage(): Promise<string> {
    return this.native.methods.getSlippage().call();
  }

  async getTreasureFee(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.getTreasureFee();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async inSwapAndLiquify(): Promise<boolean> {
    return this.native.methods.inSwapAndLiquify().call();
  }

  async includeAccountForRewards(
    account: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.includeAccountForRewards(account);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async increaseAllowance(
    spender: string,
    addedValue: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.increaseAllowance(spender, addedValue);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async isAmmContract(account: string): Promise<boolean> {
    return this.native.methods.isAmmContract(account).call();
  }

  async isExcluded(account: string): Promise<boolean> {
    return this.native.methods.isExcluded(account).call();
  }

  async name(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.name();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async nonces(arg0: string): Promise<string> {
    return this.native.methods.nonces(arg0).call();
  }

  async numCheckpoints(arg0: string): Promise<string> {
    return this.native.methods.numCheckpoints(arg0).call();
  }

  async owner(): Promise<string> {
    return this.native.methods.owner().call();
  }

  async pool(): Promise<string> {
    return this.native.methods.pool().call();
  }

  async reflect(
    tAmount: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.reflect(tAmount);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async reflectionFromToken(
    tAmount: number | string | BN,
    deductTransferFee: boolean
  ): Promise<string> {
    return this.native.methods
      .reflectionFromToken(tAmount, deductTransferFee)
      .call();
  }

  async removeFromAmmList(
    account: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.removeFromAmmList(account);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async renounceOwnership(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.renounceOwnership();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async setPoolAddress(pool_: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.setPoolAddress(pool_);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async setSlippage(
    slippage: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.setSlippage(slippage);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async symbol(): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.symbol();
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async tokenFromReflection(rAmount: number | string | BN): Promise<string> {
    return this.native.methods.tokenFromReflection(rAmount).call();
  }

  async totalFees(): Promise<string> {
    return this.native.methods.totalFees().call();
  }

  async totalSupply(): Promise<string> {
    return this.native.methods.totalSupply().call();
  }

  async transfer(
    recipient: string,
    amount: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.transfer(recipient, amount);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async transferFrom(
    sender: string,
    recipient: string,
    amount: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.transferFrom(sender, recipient, amount);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async transferOwnership(
    newOwner: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.transferOwnership(newOwner);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async uniswapV2Router(): Promise<string> {
    return this.native.methods.uniswapV2Router().call();
  }

  async uniswapV2UsdcPair(): Promise<string> {
    return this.native.methods.uniswapV2UsdcPair().call();
  }

  async usdc(): Promise<string> {
    return this.native.methods.usdc().call();
  }

  async withdraw(
    recipient: string,
    amount: number | string | BN
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.withdraw(recipient, amount);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async delegate(delegatee: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.delegate(delegatee);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async delegateBySig(
    delegatee: string,
    nonce: number | string | BN,
    expiry: number | string | BN,
    v: number | string | BN,
    r: string | number[],
    s: string | number[]
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.delegateBySig(
      delegatee,
      nonce,
      expiry,
      v,
      r,
      s
    );
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async getCurrentVotes(account: string): Promise<string> {
    return this.native.methods.getCurrentVotes(account).call();
  }

  async getPriorVotes(
    account: string,
    blockNumber: number | string | BN
  ): Promise<string> {
    return this.native.methods.getPriorVotes(account, blockNumber).call();
  }
}
