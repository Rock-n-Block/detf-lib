/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Web3 from "web3";
import { PromiEvent, TransactionReceipt } from "web3-core/types";

import { Abi } from "./GovernorProxy.abi";
import { GovernorProxy as Web3Contract } from "./GovernorProxy.web3";
import { PayableTransactionObject, NonPayableTransactionObject } from "./types";

interface IParams {
  address: string;
  web3: Web3;
  sender?: string; // the address of sender, if undefined then web3.eth.defaultAccount used
  gasEstimationMultiplayer?: number; // if undefined then 1
}

const DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %

export class GovernorProxy {
  native: Web3Contract;
  gasEstimationMultiplayer: number;
  web3: Web3;
  _sender: string | undefined;

  get sender(): string | undefined {
    if (this._sender) return this._sender;
    if (this.web3.defaultAccount) return this.web3.defaultAccount;
    return undefined;
  }

  protected getSenderOrFail(): string {
    const sender = this.sender;
    if (!sender) {
      throw new Error("Sender is required");
    }
    return sender;
  }

  constructor({ address, web3, sender, gasEstimationMultiplayer }: IParams) {
    this._sender = sender;
    this.native = new web3.eth.Contract(Abi, address) as any;
    this.gasEstimationMultiplayer =
      gasEstimationMultiplayer ?? DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
    this.web3 = web3;
  }

  protected async estimateGas<
    K,
    T extends PayableTransactionObject<K> | NonPayableTransactionObject<K>
  >(method: T, args?: Parameters<T["estimateGas"]>) {
    const originalEstimation = await method.estimateGas(...(args ?? []));
    return new BN(originalEstimation)
      .muln(this.gasEstimationMultiplayer)
      .toString();
  }

  async admin(): Promise<string> {
    return this.native.methods.admin().call();
  }

  async detf(): Promise<string> {
    return this.native.methods.detf().call();
  }

  async implementation(): Promise<string> {
    return this.native.methods.implementation().call();
  }

  async initialProposalId(): Promise<string> {
    return this.native.methods.initialProposalId().call();
  }

  async latestProposalIds(arg0: string): Promise<string> {
    return this.native.methods.latestProposalIds(arg0).call();
  }

  async pendingAdmin(): Promise<string> {
    return this.native.methods.pendingAdmin().call();
  }

  async proposalCount(): Promise<string> {
    return this.native.methods.proposalCount().call();
  }

  async proposalThreshold(): Promise<string> {
    return this.native.methods.proposalThreshold().call();
  }

  async proposals(
    arg0: number | string | BN
  ): Promise<{
    id: string;
    proposer: string;
    eta: string;
    startBlock: string;
    endBlock: string;
    forVotes: string;
    againstVotes: string;
    abstainVotes: string;
    canceled: boolean;
    executed: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: boolean;
    9: boolean;
  }> {
    return this.native.methods.proposals(arg0).call();
  }

  async timelock(): Promise<string> {
    return this.native.methods.timelock().call();
  }

  async votingDelay(): Promise<string> {
    return this.native.methods.votingDelay().call();
  }

  async votingPeriod(): Promise<string> {
    return this.native.methods.votingPeriod().call();
  }

  async setImplementation(
    implementation_: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.setImplementation(implementation_);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }
}
