/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Web3 from "web3";
import { PromiEvent, TransactionReceipt } from "web3-core/types";

import { Abi } from "./IUniswapV2Factory.abi";
import { IUniswapV2Factory as Web3Contract } from "./IUniswapV2Factory.web3";
import { PayableTransactionObject, NonPayableTransactionObject } from "./types";

interface IParams {
  address: string;
  web3: Web3;
  sender?: string; // the address of sender, if undefined then web3.eth.defaultAccount used
  gasEstimationMultiplayer?: number; // if undefined then 1
}

const DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %

export class IUniswapV2Factory {
  native: Web3Contract;
  gasEstimationMultiplayer: number;
  web3: Web3;
  _sender: string | undefined;

  get sender(): string | undefined {
    if (this._sender) return this._sender;
    if (this.web3.defaultAccount) return this.web3.defaultAccount;
    return undefined;
  }

  protected getSenderOrFail(): string {
    const sender = this.sender;
    if (!sender) {
      throw new Error("Sender is required");
    }
    return sender;
  }

  constructor({ address, web3, sender, gasEstimationMultiplayer }: IParams) {
    this._sender = sender;
    this.native = new web3.eth.Contract(Abi, address) as any;
    this.gasEstimationMultiplayer =
      gasEstimationMultiplayer ?? DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
    this.web3 = web3;
  }

  protected async estimateGas<
    K,
    T extends PayableTransactionObject<K> | NonPayableTransactionObject<K>
  >(method: T, args?: Parameters<T["estimateGas"]>) {
    const originalEstimation = await method.estimateGas(...(args ?? []));
    return new BN(originalEstimation)
      .muln(this.gasEstimationMultiplayer)
      .toString();
  }

  async feeTo(): Promise<string> {
    return this.native.methods.feeTo().call();
  }

  async feeToSetter(): Promise<string> {
    return this.native.methods.feeToSetter().call();
  }

  async getPair(tokenA: string, tokenB: string): Promise<string> {
    return this.native.methods.getPair(tokenA, tokenB).call();
  }

  async allPairs(arg0: number | string | BN): Promise<string> {
    return this.native.methods.allPairs(arg0).call();
  }

  async allPairsLength(): Promise<string> {
    return this.native.methods.allPairsLength().call();
  }

  async createPair(
    tokenA: string,
    tokenB: string
  ): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.createPair(tokenA, tokenB);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async setFeeTo(arg0: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.setFeeTo(arg0);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }

  async setFeeToSetter(arg0: string): Promise<PromiEvent<TransactionReceipt>> {
    const method = this.native.methods.setFeeToSetter(arg0);
    return method.send({
      gas: await this.estimateGas(method),
      from: this.getSenderOrFail()
    });
  }
}
