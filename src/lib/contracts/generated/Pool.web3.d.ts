/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type AdminRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type DaoAdded = ContractEventLog<{
  account: string;
  0: string;
}>;
export type DaoRemoved = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Swapped = ContractEventLog<{
  srcToken: string;
  destToken: string;
  actSrcAmount: string;
  actDestAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Transferred = ContractEventLog<{
  asset: string;
  receiver: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Pool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Pool;
  clone(): Pool;
  methods: {
    addAdmin(account: string): NonPayableTransactionObject<void>;

    addDao(account: string): NonPayableTransactionObject<void>;

    isAdmin(account: string): NonPayableTransactionObject<boolean>;

    isDao(account: string): NonPayableTransactionObject<boolean>;

    oneInchAddr(): NonPayableTransactionObject<string>;

    renounceAdmin(): NonPayableTransactionObject<void>;

    renounceDao(): NonPayableTransactionObject<void>;

    swap(
      srcToken: string,
      srcAmount: number | string | BN,
      minPrice: number | string | BN,
      maxPrice: number | string | BN,
      destToken: string,
      oneInchData: string | number[]
    ): NonPayableTransactionObject<{
      actualDestAmount: string;
      actualSrcAmount: string;
      0: string;
      1: string;
    }>;

    transfer(
      token: string,
      receiver: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateOneInchAddress(newOneInch: string): NonPayableTransactionObject<void>;

    getPoolBalance(asset: string): NonPayableTransactionObject<string>;
  };
  events: {
    AdminAdded(cb?: Callback<AdminAdded>): EventEmitter;
    AdminAdded(options?: EventOptions, cb?: Callback<AdminAdded>): EventEmitter;

    AdminRemoved(cb?: Callback<AdminRemoved>): EventEmitter;
    AdminRemoved(
      options?: EventOptions,
      cb?: Callback<AdminRemoved>
    ): EventEmitter;

    DaoAdded(cb?: Callback<DaoAdded>): EventEmitter;
    DaoAdded(options?: EventOptions, cb?: Callback<DaoAdded>): EventEmitter;

    DaoRemoved(cb?: Callback<DaoRemoved>): EventEmitter;
    DaoRemoved(options?: EventOptions, cb?: Callback<DaoRemoved>): EventEmitter;

    Swapped(cb?: Callback<Swapped>): EventEmitter;
    Swapped(options?: EventOptions, cb?: Callback<Swapped>): EventEmitter;

    Transferred(cb?: Callback<Transferred>): EventEmitter;
    Transferred(
      options?: EventOptions,
      cb?: Callback<Transferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAdded", cb: Callback<AdminAdded>): void;
  once(
    event: "AdminAdded",
    options: EventOptions,
    cb: Callback<AdminAdded>
  ): void;

  once(event: "AdminRemoved", cb: Callback<AdminRemoved>): void;
  once(
    event: "AdminRemoved",
    options: EventOptions,
    cb: Callback<AdminRemoved>
  ): void;

  once(event: "DaoAdded", cb: Callback<DaoAdded>): void;
  once(event: "DaoAdded", options: EventOptions, cb: Callback<DaoAdded>): void;

  once(event: "DaoRemoved", cb: Callback<DaoRemoved>): void;
  once(
    event: "DaoRemoved",
    options: EventOptions,
    cb: Callback<DaoRemoved>
  ): void;

  once(event: "Swapped", cb: Callback<Swapped>): void;
  once(event: "Swapped", options: EventOptions, cb: Callback<Swapped>): void;

  once(event: "Transferred", cb: Callback<Transferred>): void;
  once(
    event: "Transferred",
    options: EventOptions,
    cb: Callback<Transferred>
  ): void;
}
