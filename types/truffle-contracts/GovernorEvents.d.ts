/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GovernorEventsContract
  extends Truffle.Contract<GovernorEventsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GovernorEventsInstance>;
}

export interface NewAdmin {
  name: "NewAdmin";
  args: {
    oldAdmin: string;
    newAdmin: string;
    0: string;
    1: string;
  };
}

export interface NewImplementation {
  name: "NewImplementation";
  args: {
    oldImplementation: string;
    newImplementation: string;
    0: string;
    1: string;
  };
}

export interface NewPendingAdmin {
  name: "NewPendingAdmin";
  args: {
    oldPendingAdmin: string;
    newPendingAdmin: string;
    0: string;
    1: string;
  };
}

export interface ProposalCanceled {
  name: "ProposalCanceled";
  args: {
    id: BN;
    0: BN;
  };
}

export interface ProposalCreated {
  name: "ProposalCreated";
  args: {
    id: BN;
    proposer: string;
    targets: string[];
    values: BN[];
    signatures: string[];
    calldatas: string[];
    startBlock: BN;
    endBlock: BN;
    description: string;
    0: BN;
    1: string;
    2: string[];
    3: BN[];
    4: string[];
    5: string[];
    6: BN;
    7: BN;
    8: string;
  };
}

export interface ProposalExecuted {
  name: "ProposalExecuted";
  args: {
    id: BN;
    0: BN;
  };
}

export interface ProposalQueued {
  name: "ProposalQueued";
  args: {
    id: BN;
    eta: BN;
    0: BN;
    1: BN;
  };
}

export interface ProposalThresholdSet {
  name: "ProposalThresholdSet";
  args: {
    oldProposalThreshold: BN;
    newProposalThreshold: BN;
    0: BN;
    1: BN;
  };
}

export interface VoteCast {
  name: "VoteCast";
  args: {
    voter: string;
    proposalId: BN;
    support: BN;
    votes: BN;
    reason: string;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: string;
  };
}

export interface VotingDelaySet {
  name: "VotingDelaySet";
  args: {
    oldVotingDelay: BN;
    newVotingDelay: BN;
    0: BN;
    1: BN;
  };
}

export interface VotingPeriodSet {
  name: "VotingPeriodSet";
  args: {
    oldVotingPeriod: BN;
    newVotingPeriod: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | NewAdmin
  | NewImplementation
  | NewPendingAdmin
  | ProposalCanceled
  | ProposalCreated
  | ProposalExecuted
  | ProposalQueued
  | ProposalThresholdSet
  | VoteCast
  | VotingDelaySet
  | VotingPeriodSet;

export interface GovernorEventsInstance extends Truffle.ContractInstance {
  methods: {};

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
