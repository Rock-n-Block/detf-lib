/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(
    oneInchAddr_: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PoolInstance>;
}

export interface AdminAdded {
  name: "AdminAdded";
  args: {
    account: string;
    0: string;
  };
}

export interface AdminRemoved {
  name: "AdminRemoved";
  args: {
    account: string;
    0: string;
  };
}

export interface DaoAdded {
  name: "DaoAdded";
  args: {
    account: string;
    0: string;
  };
}

export interface DaoRemoved {
  name: "DaoRemoved";
  args: {
    account: string;
    0: string;
  };
}

export interface Swapped {
  name: "Swapped";
  args: {
    srcToken: string;
    destToken: string;
    actSrcAmount: BN;
    actDestAmount: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface Transferred {
  name: "Transferred";
  args: {
    asset: string;
    receiver: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | AdminAdded
  | AdminRemoved
  | DaoAdded
  | DaoRemoved
  | Swapped
  | Transferred;

export interface PoolInstance extends Truffle.ContractInstance {
  addAdmin: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addDao: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAdmin(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isDao(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  oneInchAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceDao: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  swap: {
    (
      srcToken: string,
      srcAmount: number | BN | string,
      minPrice: number | BN | string,
      maxPrice: number | BN | string,
      destToken: string,
      oneInchData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      srcToken: string,
      srcAmount: number | BN | string,
      minPrice: number | BN | string,
      maxPrice: number | BN | string,
      destToken: string,
      oneInchData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      srcToken: string,
      srcAmount: number | BN | string,
      minPrice: number | BN | string,
      maxPrice: number | BN | string,
      destToken: string,
      oneInchData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      srcToken: string,
      srcAmount: number | BN | string,
      minPrice: number | BN | string,
      maxPrice: number | BN | string,
      destToken: string,
      oneInchData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfer: {
    (
      token: string,
      receiver: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      receiver: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      receiver: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      receiver: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateOneInchAddress: {
    (newOneInch: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOneInch: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOneInch: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOneInch: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPoolBalance(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    addAdmin: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addDao: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAdmin(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isDao(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    oneInchAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    renounceDao: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    swap: {
      (
        srcToken: string,
        srcAmount: number | BN | string,
        minPrice: number | BN | string,
        maxPrice: number | BN | string,
        destToken: string,
        oneInchData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        srcToken: string,
        srcAmount: number | BN | string,
        minPrice: number | BN | string,
        maxPrice: number | BN | string,
        destToken: string,
        oneInchData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN]>;
      sendTransaction(
        srcToken: string,
        srcAmount: number | BN | string,
        minPrice: number | BN | string,
        maxPrice: number | BN | string,
        destToken: string,
        oneInchData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        srcToken: string,
        srcAmount: number | BN | string,
        minPrice: number | BN | string,
        maxPrice: number | BN | string,
        destToken: string,
        oneInchData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transfer: {
      (
        token: string,
        receiver: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        receiver: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        receiver: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        receiver: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateOneInchAddress: {
      (newOneInch: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOneInch: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOneInch: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOneInch: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getPoolBalance(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
