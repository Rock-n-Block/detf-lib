/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GovernorContract extends Truffle.Contract<GovernorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GovernorInstance>;
}

export interface NewAdmin {
  name: "NewAdmin";
  args: {
    oldAdmin: string;
    newAdmin: string;
    0: string;
    1: string;
  };
}

export interface NewImplementation {
  name: "NewImplementation";
  args: {
    oldImplementation: string;
    newImplementation: string;
    0: string;
    1: string;
  };
}

export interface NewPendingAdmin {
  name: "NewPendingAdmin";
  args: {
    oldPendingAdmin: string;
    newPendingAdmin: string;
    0: string;
    1: string;
  };
}

export interface ProposalCanceled {
  name: "ProposalCanceled";
  args: {
    id: BN;
    0: BN;
  };
}

export interface ProposalCreated {
  name: "ProposalCreated";
  args: {
    id: BN;
    proposer: string;
    targets: string[];
    values: BN[];
    signatures: string[];
    calldatas: string[];
    startBlock: BN;
    endBlock: BN;
    description: string;
    0: BN;
    1: string;
    2: string[];
    3: BN[];
    4: string[];
    5: string[];
    6: BN;
    7: BN;
    8: string;
  };
}

export interface ProposalExecuted {
  name: "ProposalExecuted";
  args: {
    id: BN;
    0: BN;
  };
}

export interface ProposalQueued {
  name: "ProposalQueued";
  args: {
    id: BN;
    eta: BN;
    0: BN;
    1: BN;
  };
}

export interface ProposalThresholdSet {
  name: "ProposalThresholdSet";
  args: {
    oldProposalThreshold: BN;
    newProposalThreshold: BN;
    0: BN;
    1: BN;
  };
}

export interface VoteCast {
  name: "VoteCast";
  args: {
    voter: string;
    proposalId: BN;
    support: BN;
    votes: BN;
    reason: string;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: string;
  };
}

export interface VotingDelaySet {
  name: "VotingDelaySet";
  args: {
    oldVotingDelay: BN;
    newVotingDelay: BN;
    0: BN;
    1: BN;
  };
}

export interface VotingPeriodSet {
  name: "VotingPeriodSet";
  args: {
    oldVotingPeriod: BN;
    newVotingPeriod: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | NewAdmin
  | NewImplementation
  | NewPendingAdmin
  | ProposalCanceled
  | ProposalCreated
  | ProposalExecuted
  | ProposalQueued
  | ProposalThresholdSet
  | VoteCast
  | VotingDelaySet
  | VotingPeriodSet;

export interface GovernorInstance extends Truffle.ContractInstance {
  /**
   * The EIP-712 typehash for the ballot struct used by the contract
   */
  BALLOT_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The EIP-712 typehash for the contract's domain
   */
  DOMAIN_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The maximum setable proposal threshold
   */
  MAX_PROPOSAL_THRESHOLD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The max setable voting delay
   */
  MAX_VOTING_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The max setable voting period
   */
  MAX_VOTING_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The minimum setable proposal threshold
   */
  MIN_PROPOSAL_THRESHOLD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The min setable voting delay
   */
  MIN_VOTING_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The minimum setable voting period
   */
  MIN_VOTING_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Administrator for this contract
   */
  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The address of the DETF token
   */
  detf(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Active brains of Governor
   */
  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Initial proposal id set at become
   */
  initialProposalId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isInitiate(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * The latest proposal for each proposer
   */
  latestProposalIds(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * The name of this contract
   */
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Pending administrator for this contract
   */
  pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The total number of proposals
   */
  proposalCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The maximum number of actions that can be included in a proposal
   */
  proposalMaxOperations(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The number of votes required in order for a voter to become a proposer
   */
  proposalThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The official record of all proposals ever proposed
   */
  proposals(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, BN, BN, BN, BN, BN, BN, boolean, boolean]>;

  /**
   * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
   */
  quorumVotes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The address of the DETF Protocol Timelock
   */
  timelock(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The delay before voting on a proposal may take place, once proposed, in blocks
   */
  votingDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * The duration of voting on a proposal, in blocks
   */
  votingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Used to initialize the contract during delegator contructor
   * @param detf_ The address of the DETF token
   * @param proposalThreshold_ The initial proposal threshold
   * @param timelock_ The address of the Timelock
   * @param votingDelay_ The initial voting delay
   * @param votingPeriod_ The initial voting period
   */
  initialize: {
    (
      timelock_: string,
      detf_: string,
      votingPeriod_: number | BN | string,
      votingDelay_: number | BN | string,
      proposalThreshold_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      timelock_: string,
      detf_: string,
      votingPeriod_: number | BN | string,
      votingDelay_: number | BN | string,
      proposalThreshold_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      timelock_: string,
      detf_: string,
      votingPeriod_: number | BN | string,
      votingDelay_: number | BN | string,
      proposalThreshold_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      timelock_: string,
      detf_: string,
      votingPeriod_: number | BN | string,
      votingDelay_: number | BN | string,
      proposalThreshold_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Admin only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count
   * Initiate the Governor contract
   */
  initiate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Function used to propose a new proposal. Sender must have delegates above the proposal threshold
   * @param calldatas Calldatas for proposal calls
   * @param description String description of the proposal
   * @param signatures Function signatures for proposal calls
   * @param targets Target addresses for proposal calls
   * @param values Eth values for proposal calls
   */
  propose: {
    (
      targets: string[],
      values: (number | BN | string)[],
      signatures: string[],
      calldatas: string[],
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      targets: string[],
      values: (number | BN | string)[],
      signatures: string[],
      calldatas: string[],
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      targets: string[],
      values: (number | BN | string)[],
      signatures: string[],
      calldatas: string[],
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targets: string[],
      values: (number | BN | string)[],
      signatures: string[],
      calldatas: string[],
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Queues a proposal of state succeeded
   * @param proposalId The id of the proposal to queue
   */
  queue: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Executes a queued proposal if eta has passed
   * @param proposalId The id of the proposal to execute
   */
  execute: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold
   * @param proposalId The id of the proposal to cancel
   */
  cancel: {
    (
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cast a vote for a proposal
   * @param proposalId The id of the proposal to vote on
   * @param support The support value for the vote. 0=against, 1=for, 2=abstain
   */
  castVote: {
    (
      proposalId: number | BN | string,
      support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Cast a vote for a proposal with a reason
   * @param proposalId The id of the proposal to vote on
   * @param reason The reason given for the vote by the voter
   * @param support The support value for the vote. 0=against, 1=for, 2=abstain
   */
  castVoteWithReason: {
    (
      proposalId: number | BN | string,
      support: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      support: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      support: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      support: number | BN | string,
      reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * public function that accepts EIP-712 signatures for voting on proposals.
   * Cast a vote for a proposal by signature
   */
  castVoteBySig: {
    (
      proposalId: number | BN | string,
      support: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proposalId: number | BN | string,
      support: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalId: number | BN | string,
      support: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalId: number | BN | string,
      support: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Admin function for setting the voting delay
   * @param newVotingDelay new voting delay, in blocks
   */
  setVotingDelay: {
    (
      newVotingDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newVotingDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newVotingDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newVotingDelay: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Admin function for setting the voting period
   * @param newVotingPeriod new voting period, in blocks
   */
  setVotingPeriod: {
    (
      newVotingPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newVotingPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newVotingPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newVotingPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * newProposalThreshold must be greater than the hardcoded min
   * Admin function for setting the proposal threshold
   * @param newProposalThreshold new proposal threshold
   */
  setProposalThreshold: {
    (
      newProposalThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newProposalThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newProposalThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newProposalThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
   * Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
   * @param newPendingAdmin New pending admin.
   */
  setPendingAdmin: {
    (newPendingAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPendingAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Admin function for pending admin to accept role and update admin
   * Accepts transfer of admin rights. msg.sender must be pendingAdmin
   */
  acceptAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getActions(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[], string[], string[]]>;

  /**
   * Gets the receipt for a voter on a given proposal
   * @param proposalId the id of proposal
   * @param voter The address of the voter
   */
  getReceipt(
    proposalId: number | BN | string,
    voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ hasVoted: boolean; support: BN; votes: BN }>;

  /**
   * Gets the state of a proposal
   * @param proposalId The id of the proposal
   */
  state(
    proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * The EIP-712 typehash for the ballot struct used by the contract
     */
    BALLOT_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The EIP-712 typehash for the contract's domain
     */
    DOMAIN_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The maximum setable proposal threshold
     */
    MAX_PROPOSAL_THRESHOLD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The max setable voting delay
     */
    MAX_VOTING_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The max setable voting period
     */
    MAX_VOTING_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The minimum setable proposal threshold
     */
    MIN_PROPOSAL_THRESHOLD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The min setable voting delay
     */
    MIN_VOTING_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The minimum setable voting period
     */
    MIN_VOTING_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Administrator for this contract
     */
    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The address of the DETF token
     */
    detf(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Active brains of Governor
     */
    implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Initial proposal id set at become
     */
    initialProposalId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    isInitiate(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * The latest proposal for each proposer
     */
    latestProposalIds(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * The name of this contract
     */
    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Pending administrator for this contract
     */
    pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The total number of proposals
     */
    proposalCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The official record of all proposals ever proposed
     */
    proposals(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, BN, BN, BN, BN, BN, BN, boolean, boolean]>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The address of the DETF Protocol Timelock
     */
    timelock(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The delay before voting on a proposal may take place, once proposed, in blocks
     */
    votingDelay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Used to initialize the contract during delegator contructor
     * @param detf_ The address of the DETF token
     * @param proposalThreshold_ The initial proposal threshold
     * @param timelock_ The address of the Timelock
     * @param votingDelay_ The initial voting delay
     * @param votingPeriod_ The initial voting period
     */
    initialize: {
      (
        timelock_: string,
        detf_: string,
        votingPeriod_: number | BN | string,
        votingDelay_: number | BN | string,
        proposalThreshold_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        timelock_: string,
        detf_: string,
        votingPeriod_: number | BN | string,
        votingDelay_: number | BN | string,
        proposalThreshold_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        timelock_: string,
        detf_: string,
        votingPeriod_: number | BN | string,
        votingDelay_: number | BN | string,
        proposalThreshold_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        timelock_: string,
        detf_: string,
        votingPeriod_: number | BN | string,
        votingDelay_: number | BN | string,
        proposalThreshold_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Admin only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count
     * Initiate the Governor contract
     */
    initiate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Function used to propose a new proposal. Sender must have delegates above the proposal threshold
     * @param calldatas Calldatas for proposal calls
     * @param description String description of the proposal
     * @param signatures Function signatures for proposal calls
     * @param targets Target addresses for proposal calls
     * @param values Eth values for proposal calls
     */
    propose: {
      (
        targets: string[],
        values: (number | BN | string)[],
        signatures: string[],
        calldatas: string[],
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        targets: string[],
        values: (number | BN | string)[],
        signatures: string[],
        calldatas: string[],
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        targets: string[],
        values: (number | BN | string)[],
        signatures: string[],
        calldatas: string[],
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targets: string[],
        values: (number | BN | string)[],
        signatures: string[],
        calldatas: string[],
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Queues a proposal of state succeeded
     * @param proposalId The id of the proposal to queue
     */
    queue: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Executes a queued proposal if eta has passed
     * @param proposalId The id of the proposal to execute
     */
    execute: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold
     * @param proposalId The id of the proposal to cancel
     */
    cancel: {
      (
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cast a vote for a proposal
     * @param proposalId The id of the proposal to vote on
     * @param support The support value for the vote. 0=against, 1=for, 2=abstain
     */
    castVote: {
      (
        proposalId: number | BN | string,
        support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Cast a vote for a proposal with a reason
     * @param proposalId The id of the proposal to vote on
     * @param reason The reason given for the vote by the voter
     * @param support The support value for the vote. 0=against, 1=for, 2=abstain
     */
    castVoteWithReason: {
      (
        proposalId: number | BN | string,
        support: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        support: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        support: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        support: number | BN | string,
        reason: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * public function that accepts EIP-712 signatures for voting on proposals.
     * Cast a vote for a proposal by signature
     */
    castVoteBySig: {
      (
        proposalId: number | BN | string,
        support: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proposalId: number | BN | string,
        support: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proposalId: number | BN | string,
        support: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proposalId: number | BN | string,
        support: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Admin function for setting the voting delay
     * @param newVotingDelay new voting delay, in blocks
     */
    setVotingDelay: {
      (
        newVotingDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newVotingDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newVotingDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newVotingDelay: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Admin function for setting the voting period
     * @param newVotingPeriod new voting period, in blocks
     */
    setVotingPeriod: {
      (
        newVotingPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newVotingPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newVotingPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newVotingPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * newProposalThreshold must be greater than the hardcoded min
     * Admin function for setting the proposal threshold
     * @param newProposalThreshold new proposal threshold
     */
    setProposalThreshold: {
      (
        newProposalThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newProposalThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newProposalThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newProposalThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * @param newPendingAdmin New pending admin.
     */
    setPendingAdmin: {
      (
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPendingAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Admin function for pending admin to accept role and update admin
     * Accepts transfer of admin rights. msg.sender must be pendingAdmin
     */
    acceptAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getActions(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BN[], string[], string[]]>;

    /**
     * Gets the receipt for a voter on a given proposal
     * @param proposalId the id of proposal
     * @param voter The address of the voter
     */
    getReceipt(
      proposalId: number | BN | string,
      voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ hasVoted: boolean; support: BN; votes: BN }>;

    /**
     * Gets the state of a proposal
     * @param proposalId The id of the proposal
     */
    state(
      proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
