"use strict";
/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Detf = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var Detf_abi_1 = require("./Detf.abi");
var DEFAULT_GAS_ESTIMATION_MULTIPLAYER = 1.1; // + 10 %
var Detf = /** @class */ (function () {
    function Detf(_a) {
        var address = _a.address, web3 = _a.web3, sender = _a.sender, gasEstimationMultiplayer = _a.gasEstimationMultiplayer;
        this._sender = sender;
        this.native = new web3.eth.Contract(Detf_abi_1.Abi, address);
        this.gasEstimationMultiplayer =
            gasEstimationMultiplayer !== null && gasEstimationMultiplayer !== void 0 ? gasEstimationMultiplayer : DEFAULT_GAS_ESTIMATION_MULTIPLAYER;
        this.web3 = web3;
    }
    Object.defineProperty(Detf.prototype, "sender", {
        get: function () {
            if (this._sender)
                return this._sender;
            if (this.web3.defaultAccount)
                return this.web3.defaultAccount;
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Detf.prototype.getSenderOrFail = function () {
        var sender = this.sender;
        if (!sender) {
            throw new Error("Sender is required");
        }
        return sender;
    };
    Detf.prototype.estimateGas = function (method, args) {
        return __awaiter(this, void 0, void 0, function () {
            var originalEstimation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, method.estimateGas.apply(method, __spreadArray([], __read((args !== null && args !== void 0 ? args : [])), false))];
                    case 1:
                        originalEstimation = _a.sent();
                        return [2 /*return*/, new bn_js_1.default(originalEstimation)
                                .muln(this.gasEstimationMultiplayer)
                                .toString()];
                }
            });
        });
    };
    Detf.prototype.DELEGATION_TYPEHASH = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.DELEGATION_TYPEHASH().call()];
            });
        });
    };
    Detf.prototype.DOMAIN_TYPEHASH = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.DOMAIN_TYPEHASH().call()];
            });
        });
    };
    Detf.prototype.addToAmmList = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.addToAmmList(account);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.allowance = function (owner, spender) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.allowance(owner, spender).call()];
            });
        });
    };
    Detf.prototype.approve = function (spender, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.approve(spender, amount);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.balanceOf = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.balanceOf(account).call()];
            });
        });
    };
    Detf.prototype.changeWithdrawLimit = function (newLimit) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.changeWithdrawLimit(newLimit);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.checkpoints = function (arg0, arg1) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.checkpoints(arg0, arg1).call()];
            });
        });
    };
    Detf.prototype.decreaseAllowance = function (spender, subtractedValue) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.decreaseAllowance(spender, subtractedValue);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.delegates = function (arg0) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.delegates(arg0).call()];
            });
        });
    };
    Detf.prototype.delegatorVotes = function (arg0) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.delegatorVotes(arg0).call()];
            });
        });
    };
    Detf.prototype.excludeAccountFromRewards = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.excludeAccountFromRewards(account);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.getHoldingFee = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.getHoldingFee();
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.getSlippage = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.getSlippage().call()];
            });
        });
    };
    Detf.prototype.getTreasureFee = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.getTreasureFee();
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.inSwapAndLiquify = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.inSwapAndLiquify().call()];
            });
        });
    };
    Detf.prototype.includeAccountForRewards = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.includeAccountForRewards(account);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.increaseAllowance = function (spender, addedValue) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.increaseAllowance(spender, addedValue);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.isAmmContract = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.isAmmContract(account).call()];
            });
        });
    };
    Detf.prototype.isExcluded = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.isExcluded(account).call()];
            });
        });
    };
    Detf.prototype.name = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.name();
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.nonces = function (arg0) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.nonces(arg0).call()];
            });
        });
    };
    Detf.prototype.numCheckpoints = function (arg0) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.numCheckpoints(arg0).call()];
            });
        });
    };
    Detf.prototype.owner = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.owner().call()];
            });
        });
    };
    Detf.prototype.pool = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.pool().call()];
            });
        });
    };
    Detf.prototype.reflect = function (tAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.reflect(tAmount);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.reflectionFromToken = function (tAmount, deductTransferFee) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods
                        .reflectionFromToken(tAmount, deductTransferFee)
                        .call()];
            });
        });
    };
    Detf.prototype.removeFromAmmList = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.removeFromAmmList(account);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.renounceOwnership = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.renounceOwnership();
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.setPoolAddress = function (pool_) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.setPoolAddress(pool_);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.setSlippage = function (slippage) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.setSlippage(slippage);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.symbol = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.symbol();
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.tokenFromReflection = function (rAmount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.tokenFromReflection(rAmount).call()];
            });
        });
    };
    Detf.prototype.totalFees = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.totalFees().call()];
            });
        });
    };
    Detf.prototype.totalSupply = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.totalSupply().call()];
            });
        });
    };
    Detf.prototype.transfer = function (recipient, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.transfer(recipient, amount);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.transferFrom = function (sender, recipient, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.transferFrom(sender, recipient, amount);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.transferOwnership = function (newOwner) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.transferOwnership(newOwner);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.uniswapV2Router = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.uniswapV2Router().call()];
            });
        });
    };
    Detf.prototype.uniswapV2UsdcPair = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.uniswapV2UsdcPair().call()];
            });
        });
    };
    Detf.prototype.usdc = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.usdc().call()];
            });
        });
    };
    Detf.prototype.withdraw = function (recipient, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.withdraw(recipient, amount);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.delegate = function (delegatee) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.delegate(delegatee);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.delegateBySig = function (delegatee, nonce, expiry, v, r, s) {
        return __awaiter(this, void 0, void 0, function () {
            var method, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        method = this.native.methods.delegateBySig(delegatee, nonce, expiry, v, r, s);
                        _b = (_a = method).send;
                        _c = {};
                        return [4 /*yield*/, this.estimateGas(method)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.gas = _d.sent(),
                                _c.from = this.getSenderOrFail(),
                                _c)])];
                }
            });
        });
    };
    Detf.prototype.getCurrentVotes = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.getCurrentVotes(account).call()];
            });
        });
    };
    Detf.prototype.getPriorVotes = function (account, blockNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.native.methods.getPriorVotes(account, blockNumber).call()];
            });
        });
    };
    return Detf;
}());
exports.Detf = Detf;
